// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// EXISTING MEDICARE DATA MODELS (from database introspection)
// ============================================================================

model carriers {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String   @db.VarChar(255)
  am_best_rating  String?  @db.VarChar(10)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)

  medicare_plans medicare_plans[]
}

model formularies {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  medicare_plans medicare_plans[]
}

model leads {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name  String   @db.VarChar(100)
  last_name   String   @db.VarChar(100)
  email       String   @db.VarChar(255)
  phone       String?  @db.VarChar(20)
  zip_code    String   @db.VarChar(10)
  plan_type   String?  @db.VarChar(50)
  status      String   @default("new") @db.VarChar(50)
  notes       String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
}

model locations {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String   @db.VarChar(255)
  type      String   @db.VarChar(50)
  state     String   @db.VarChar(2)
  county    String?  @db.VarChar(100)
  city      String?  @db.VarChar(100)
  zip_code  String   @db.VarChar(10)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  plan_locations plan_locations[]
}

model medicare_plans {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String   @db.VarChar(255)
  carrier_id        String   @db.Uuid
  plan_type_id      String   @db.Uuid
  formulary_id      String?  @db.Uuid
  premium           Decimal? @db.Decimal(10, 2)
  deductible        Decimal? @db.Decimal(10, 2)
  max_out_of_pocket Decimal? @db.Decimal(10, 2)
  star_rating       Int?     @db.SmallInt
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)

  carriers      carriers      @relation(fields: [carrier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plan_types   plan_types    @relation(fields: [plan_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  formularies  formularies?  @relation(fields: [formulary_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  plan_locations plan_locations[]
  plan_providers plan_providers[]
}

model plan_comparisons {
  id              String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  session_id      String?      @db.Uuid
  plan_ids        String[]     @db.Uuid
  comparison_data Json?        @default("{}")
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)

  user_sessions   LegacyUserSession? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model plan_locations {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  plan_id         String   @db.Uuid
  location_id     String   @db.Uuid
  is_available    Boolean  @default(true)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)

  medicare_plans medicare_plans @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  locations      locations      @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model plan_providers {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  plan_id     String   @db.Uuid
  provider_id String   @db.Uuid
  is_in_network Boolean @default(true)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  medicare_plans medicare_plans @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  providers      providers      @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model plan_types {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @db.VarChar(100)
  description String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  medicare_plans medicare_plans[]
}

model providers {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @db.VarChar(255)
  specialty   String?  @db.VarChar(100)
  address     String?  @db.Text
  phone       String?  @db.VarChar(20)
  npi         String?  @db.VarChar(10)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  plan_providers plan_providers[]
}

// Legacy UserSession model for plan comparisons (keeping existing data)
model LegacyUserSession {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  session_id       String             @db.VarChar(255)
  zip_code         String?            @db.VarChar(10)
  preferences      Json?              @default("{}")
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  expires_at       DateTime?          @default(dbgenerated("(now() + '7days'::interval)")) @db.Timestamptz(6)

  plan_comparisons plan_comparisons[]

  @@index([session_id], map: "idx_user_sessions_session")
  @@map("user_sessions")
}

// ============================================================================
// AUTHENTICATION & USER MANAGEMENT MODELS
// ============================================================================

// User model for authentication
model User {
  id              String    @id @default(cuid())
  email           String    @unique
  passwordHash    String
  firstName       String
  lastName        String
  phone           String?
  dateOfBirth     DateTime?
  medicareNumber  String?
  memberNumber    String?
  planType        String?
  isActive        Boolean   @default(true)
  emailVerified   Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  lastLogin       DateTime?

  // Relations
  sessions        UserSession[]
  insurancePlans  InsurancePlan[]
  claims          Claim[]
  documents       Document[]
  mfaSecret      MFASecret?
  // Note: We'll link leads to users through application logic, not database constraints

  @@map("auth_users")
}

// User sessions for JWT management
model UserSession {
  id          String   @id @default(cuid())
  userId      String
  tokenHash   String
  expiresAt   DateTime
  createdAt   DateTime @default(now())

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_user_sessions")
}

// Insurance plans for users (personal plans)
model InsurancePlan {
  id              String   @id @default(cuid())
  userId          String
  planName        String
  planType        String
  carrier         String
  memberNumber    String
  effectiveDate   DateTime
  premium         Float
  deductible      Float
  maxOutOfPocket  Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_insurance_plans")
}

// Claims for users
model Claim {
  id            String   @id @default(cuid())
  userId        String
  dateOfService DateTime
  provider      String
  service       String
  amount        Float
  status        ClaimStatus
  processedDate DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_claims")
}

// Documents for users
model Document {
  id          String   @id @default(cuid())
  userId      String
  fileName    String
  fileType    String
  fileSize    Int
  fileUrl     String
  category    DocumentCategory
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_documents")
}

// ============================================================================
// PHASE 5: SECURITY & PERFORMANCE MODELS
// ============================================================================

// Multi-Factor Authentication
model MFASecret {
  id           String   @id @default(cuid())
  userId       String   @unique
  secret       String
  backupCodes  String[]
  isEnabled    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("auth_mfa_secrets")
}

// Rate Limiting
model RateLimit {
  id            String   @id @default(cuid())
  identifier    String   // IP address, user ID, or other identifier
  endpoint      String   // API endpoint or route
  requestCount  Int      @default(1)
  firstRequest  DateTime @default(now())
  lastRequest   DateTime @default(now())

  @@unique([identifier, endpoint])
  @@map("security_rate_limits")
}

// Performance Monitoring
model PerformanceMetric {
  id           String   @id @default(cuid())
  endpoint     String
  method       String
  responseTime Int      // Response time in milliseconds
  statusCode   Int
  userId       String?
  ipAddress    String
  userAgent    String
  metadata     Json     @default("{}")
  timestamp    DateTime @default(now())
  memoryUsage  Float?   // Memory usage in MB
  cpuUsage     Float?   // CPU usage percentage

  @@map("performance_metrics")
}

// Caching System
model CacheEntry {
  id           String   @id @default(cuid())
  key          String   @unique
  value        String   // Serialized and optionally compressed value
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  lastAccessed DateTime @default(now())
  accessCount  Int      @default(0)
  tags         String[]

  @@map("cache_entries")
}

// Security Audit Events
model SecurityEvent {
  id          String           @id @default(cuid())
  userId      String?
  eventType   SecurityEventType
  severity    SecuritySeverity
  description String
  ipAddress   String
  userAgent   String
  metadata    Json             @default("{}")
  timestamp   DateTime         @default(now())
  resolved    Boolean          @default(false)
  resolvedAt  DateTime?
  resolvedBy  String?

  @@map("security_events")
}

// Security Alerts
model SecurityAlert {
  id              String            @id @default(cuid())
  title           String
  description     String
  severity        SecuritySeverity
  eventCount      Int               @default(1)
  firstOccurrence DateTime          @default(now())
  lastOccurrence  DateTime          @default(now())
  status          SecurityAlertStatus
  assignedTo      String?
  notes           String?
  metadata        Json              @default("{}")
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  @@map("security_alerts")
}

// ============================================================================
// ENUMS
// ============================================================================

enum ClaimStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
  COMPLETED
}

enum DocumentCategory {
  ID_DOCUMENT
  MEDICAL_RECORD
  CLAIM_FORM
  EXPLANATION_OF_BENEFITS
  INSURANCE_CARD
  OTHER
}

enum SecurityEventType {
  // Authentication events
  LOGIN_SUCCESS
  LOGIN_FAILURE
  LOGOUT
  PASSWORD_CHANGE
  PASSWORD_RESET
  MFA_ENABLED
  MFA_DISABLED
  MFA_FAILURE
  
  // Authorization events
  ACCESS_GRANTED
  ACCESS_DENIED
  PERMISSION_CHANGE
  ROLE_CHANGE
  
  // Data access events
  DATA_VIEWED
  DATA_CREATED
  DATA_MODIFIED
  DATA_DELETED
  DATA_EXPORTED
  
  // System events
  CONFIGURATION_CHANGE
  SYSTEM_ERROR
  BACKUP_CREATED
  MAINTENANCE_MODE
  
  // Security events
  SUSPICIOUS_ACTIVITY
  BRUTE_FORCE_ATTEMPT
  SQL_INJECTION_ATTEMPT
  XSS_ATTEMPT
  CSRF_ATTEMPT
  FILE_UPLOAD_ATTEMPT
  
  // Network events
  UNUSUAL_TRAFFIC
  GEO_LOCATION_ANOMALY
  TOR_EXIT_NODE
  VPN_DETECTED
}

enum SecuritySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum SecurityAlertStatus {
  ACTIVE
  INVESTIGATING
  RESOLVED
  FALSE_POSITIVE
}
