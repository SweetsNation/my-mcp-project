// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================================================
// EXISTING MEDICARE DATA MODELS (from database introspection)
// ============================================================================

model carriers {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String   @db.VarChar(255)
  am_best_rating  String?  @db.VarChar(10)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)

  medicare_plans medicare_plans[]
}

model formularies {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @db.VarChar(255)
  description String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  medicare_plans medicare_plans[]
}

model leads {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  first_name  String   @db.VarChar(100)
  last_name   String   @db.VarChar(100)
  email       String   @db.VarChar(255)
  phone       String?  @db.VarChar(20)
  zip_code    String   @db.VarChar(10)
  plan_type   String?  @db.VarChar(50)
  status      String   @default("new") @db.VarChar(50)
  notes       String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)
}

model locations {
  id        String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name      String   @db.VarChar(255)
  type      String   @db.VarChar(50)
  state     String   @db.VarChar(2)
  county    String?  @db.VarChar(100)
  city      String?  @db.VarChar(100)
  zip_code  String   @db.VarChar(10)
  created_at DateTime @default(now()) @db.Timestamptz(6)
  updated_at DateTime @default(now()) @db.Timestamptz(6)

  plan_locations plan_locations[]
}

model medicare_plans {
  id                String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name              String   @db.VarChar(255)
  carrier_id        String   @db.Uuid
  plan_type_id      String   @db.Uuid
  formulary_id      String?  @db.Uuid
  premium           Decimal? @db.Decimal(10, 2)
  deductible        Decimal? @db.Decimal(10, 2)
  max_out_of_pocket Decimal? @db.Decimal(10, 2)
  star_rating       Int?     @db.SmallInt
  created_at        DateTime @default(now()) @db.Timestamptz(6)
  updated_at        DateTime @default(now()) @db.Timestamptz(6)

  carriers      carriers      @relation(fields: [carrier_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  plan_types   plan_types    @relation(fields: [plan_type_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  formularies  formularies?  @relation(fields: [formulary_id], references: [id], onDelete: SetNull, onUpdate: NoAction)
  plan_locations plan_locations[]
  plan_providers plan_providers[]
}

model plan_comparisons {
  id              String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  session_id      String?      @db.Uuid
  plan_ids        String[]     @db.Uuid
  comparison_data Json?        @default("{}")
  created_at      DateTime?    @default(now()) @db.Timestamptz(6)

  user_sessions   LegacyUserSession? @relation(fields: [session_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model plan_locations {
  id              String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  plan_id         String   @db.Uuid
  location_id     String   @db.Uuid
  is_available    Boolean  @default(true)
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)

  medicare_plans medicare_plans @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  locations      locations      @relation(fields: [location_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model plan_providers {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  plan_id     String   @db.Uuid
  provider_id String   @db.Uuid
  is_in_network Boolean @default(true)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  medicare_plans medicare_plans @relation(fields: [plan_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  providers      providers      @relation(fields: [provider_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model plan_types {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @db.VarChar(100)
  description String?  @db.Text
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  medicare_plans medicare_plans[]
}

model providers {
  id          String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String   @db.VarChar(255)
  specialty   String?  @db.VarChar(100)
  address     String?  @db.Text
  phone       String?  @db.VarChar(20)
  npi         String?  @db.VarChar(10)
  created_at  DateTime @default(now()) @db.Timestamptz(6)
  updated_at  DateTime @default(now()) @db.Timestamptz(6)

  plan_providers plan_providers[]
}

// Legacy UserSession model for plan comparisons (keeping existing data)
model LegacyUserSession {
  id               String             @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  session_id       String             @db.VarChar(255)
  zip_code         String?            @db.VarChar(10)
  preferences      Json?              @default("{}")
  created_at       DateTime?          @default(now()) @db.Timestamptz(6)
  expires_at       DateTime?          @default(dbgenerated("(now() + '7days'::interval)")) @db.Timestamptz(6)

  plan_comparisons plan_comparisons[]

  @@index([session_id], map: "idx_user_sessions_session")
  @@map("user_sessions")
}

